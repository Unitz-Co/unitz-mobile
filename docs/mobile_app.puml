@startuml
allow_mixing
rectangle MobileApp {
  together {
    package Screens {
      rectangle Screen1 {
        component View1
        component Data1
        Models <-ri- Data1
      }
      rectangle Screen2 {
        component View2
        component Data2
        Models <-ri- Data2
      }
    }
    package Components {
      rectangle Component1 {
        component ComView1
        component ComData1
        Models <-ri- ComData1
      }
      rectangle Component2 {
        component ComView2
        component ComData2
        Models <-ri- ComData2
      }
    }
  }
  together {
    package Models {
      rectangle UserModel
      rectangle AdvisorModel
      rectangle TransactionModel
      rectangle ProfileModel
    }
    package Providers {
      rectangle AuthProvider
      rectangle I18nProvider
      rectangle OthersProviders
    }
    Models -ri- Providers
  }
  
  together {
    together {
      package UnitzLib {
        object gstyle {
          styleguides
          spacings
          colors
        }
        collections hooks
        collections utils
        collections translations
        ' layout connectors
        hooks -[hidden]- utils
        gstyle -[hidden]- translations
      }
      package "3rd party libraries" {
        collections Navigation
        collections Clients
      }
    }
    together {
      usecase Routes
      node "State Management/Apollo Clients" as StateMan
    }
  }

  together {
    rectangle Network
    rectangle LocalStorage
  }

  View1 ----> gstyle
  View2 ----> gstyle
  ComView1 ----> gstyle
  ComView2 ----> gstyle

  Routes --> Screens
  Routes --> Providers
  Models --> UnitzLib

  Models -do----> StateMan
  Screens -do----> StateMan
  Providers -do----> StateMan
  Components -do----> StateMan
}

StateMan ---> Network
StateMan ---> LocalStorage

cloud Internet
Network ----------------> Internet

together {
  rectangle ExternalService {
    package TokboxService
    package FirebaseService {
      component FirebaseAuth
      component FirebaseDb
    }
    package ContentfulAdvisor {
      component ContentfulAdvisorApp
      rectangle ContentfulAdvisorWebhook
    }
    ' layout connectors
    FirebaseService -[hidden]- ContentfulAdvisor
    ContentfulAdvisor -[hidden]- TokboxService
  }

  rectangle Services {
    package HasuraDataService {
      component HasuraEngine
      database hasura [
        Users
        ---
        Advisor
        ---
        Trasaction
      ]
    }
    package ServiceAuth {
      rectangle ServiceAuthHook
      rectangle ServiceAuthApi
      ServiceAuthHook <-- FirebaseAuth : trigger on \n user create/update
      ServiceAuthHook --> HasuraDataService : update/sync \n user/advisor profile
    }

    ContentfulAdvisorWebhook --> ServiceAuthApi : trigger on \n advisor profile change
    ServiceAuthApi --> HasuraDataService : create/update \n adivsor profile

    package ServicePresence {
      rectangle ServicePresenceHook
      ServicePresenceHook <-- FirebaseDb : trigger on \n connection disconnect
      ServicePresenceHook --> HasuraDataService : update \n presense status

    }

    package ServiceVideo {
      rectangle ServiceVideoApi
      ServiceVideoApi <-ri-> TokboxService : request to create \n new session and token
      ServiceVideoApi --> HasuraDataService : log call session
    }

    ' layout connectors
    HasuraDataService -[hidden]-> ServiceAuth
    ServiceAuth -[hidden]- ServicePresence
    ServicePresence -[hidden]- ServiceVideo

  }
}
Services -[hidden]le- ExternalService

Internet ---> Services
MobileApp ---> HasuraDataService : query/subscribe data
MobileApp <-- HasuraDataService : push realtime updates

actor Operator
Operator ---> ContentfulAdvisorApp : manage advisors
' layout connectors
MobileApp -[hidden]- Internet
Internet -[hidden]- Services
Operator -[hidden]- ExternalService

@enduml